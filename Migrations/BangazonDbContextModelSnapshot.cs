// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BangazonAPI.Migrations
{
    [DbContext(typeof(BangazonDbContext))]
    partial class BangazonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bangazon.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Home & Garden"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Open")
                        .HasColumnType("boolean");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 2,
                            Date = new DateTime(2024, 8, 14, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8787),
                            Open = false,
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 4,
                            Date = new DateTime(2024, 8, 16, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8835),
                            Open = false,
                            PaymentTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            Date = new DateTime(2024, 8, 18, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8837),
                            Open = true
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            Date = new DateTime(2024, 8, 20, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8839),
                            Open = true
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 2,
                            Date = new DateTime(2024, 8, 22, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8840),
                            Open = false,
                            PaymentTypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            CustomerId = 2,
                            Date = new DateTime(2024, 8, 23, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8842),
                            Open = true,
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            CustomerId = 4,
                            Date = new DateTime(2024, 8, 21, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8843),
                            Open = true
                        },
                        new
                        {
                            Id = 8,
                            CustomerId = 4,
                            Date = new DateTime(2024, 8, 24, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8845),
                            Open = false,
                            PaymentTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            CustomerId = 2,
                            Date = new DateTime(2024, 8, 19, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8846),
                            Open = false,
                            PaymentTypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            CustomerId = 2,
                            Date = new DateTime(2024, 8, 17, 10, 51, 42, 845, DateTimeKind.Local).AddTicks(8848),
                            Open = false,
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("Bangazon.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 2,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 4,
                            Name = "PayPal"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            Name = "Apple Pay"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 1,
                            Name = "Google Pay"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "A high-performance laptop.",
                            Name = "Laptop",
                            Price = 999.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "A latest model smartphone.",
                            Name = "Smartphone",
                            Price = 699.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "A bestselling fiction book.",
                            Name = "Fiction Book",
                            Price = 19.99m,
                            SellerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "A popular cookbook.",
                            Name = "Cookbook",
                            Price = 24.99m,
                            SellerId = 3
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Comfortable denim jeans.",
                            Name = "Jeans",
                            Price = 49.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "A trendy t-shirt.",
                            Name = "T-Shirt",
                            Price = 14.99m,
                            SellerId = 5
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Description = "A comfortable sofa.",
                            Name = "Sofa",
                            Price = 499.99m,
                            SellerId = 5
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "An automatic coffee maker.",
                            Name = "Coffee Maker",
                            Price = 89.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Description = "A collectible action figure.",
                            Name = "Action Figure",
                            Price = 29.99m,
                            SellerId = 3
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "A fun board game.",
                            Name = "Board Game",
                            Price = 39.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "A powerful tablet.",
                            Name = "Tablet",
                            Price = 499.99m,
                            SellerId = 3
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "A smartwatch with various features.",
                            Name = "Smartwatch",
                            Price = 199.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Description = "An insightful non-fiction book.",
                            Name = "Non-fiction Book",
                            Price = 22.99m,
                            SellerId = 5
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Description = "A warm jacket.",
                            Name = "Jacket",
                            Price = 89.99m,
                            SellerId = 3
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Description = "A powerful microwave oven.",
                            Name = "Microwave",
                            Price = 149.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "A high-speed blender.",
                            Name = "Blender",
                            Price = 59.99m,
                            SellerId = 5
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            Description = "A challenging puzzle.",
                            Name = "Puzzle",
                            Price = 19.99m,
                            SellerId = 3
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            Description = "A toy car for kids.",
                            Name = "Toy Car",
                            Price = 14.99m,
                            SellerId = 5
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            Description = "A detailed history book.",
                            Name = "History Book",
                            Price = 29.99m,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            Description = "Comfortable running sneakers.",
                            Name = "Sneakers",
                            Price = 79.99m,
                            SellerId = 3
                        });
                });

            modelBuilder.Entity("Bangazon.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Seller")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            City = "Anytown",
                            Email = "john@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Seller = true,
                            State = "TX",
                            Zip = "12345"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak St",
                            City = "Othertown",
                            Email = "jane@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Seller = false,
                            State = "CA",
                            Zip = "67890"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine St",
                            City = "Smallville",
                            Email = "alice@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Seller = true,
                            State = "NY",
                            Zip = "11223"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Maple St",
                            City = "Largetown",
                            Email = "bob@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            Seller = false,
                            State = "FL",
                            Zip = "33445"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Birch St",
                            City = "Middletown",
                            Email = "eve@example.com",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Seller = true,
                            State = "OH",
                            Zip = "55667"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.Order", b =>
                {
                    b.HasOne("Bangazon.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bangazon.Models.PaymentType", "PaymentType")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentTypeId");

                    b.Navigation("Customer");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Bangazon.Models.PaymentType", b =>
                {
                    b.HasOne("Bangazon.Models.User", "Customer")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bangazon.Models.Product", b =>
                {
                    b.HasOne("Bangazon.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bangazon.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("Bangazon.Models.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Bangazon.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Bangazon.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Bangazon.Models.PaymentType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Bangazon.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PaymentTypes");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
